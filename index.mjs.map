{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/ndarray.js","../lib/accessors.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array ignoring `NaN` values and using a one-pass trial mean algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass trial mean approach, as suggested by Chan et al (1983).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Ling, Robert F. 1974. \"Comparison of Several Algorithms for Computing Sample Means and Variances.\" _Journal of the American Statistical Association_ 69 (348). American Statistical Association, Taylor & Francis, Ltd.: 859–66. doi:[10.2307/2286154](https://doi.org/10.2307/2286154).\n* -   Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. 1983. \"Algorithms for Computing the Sample Variance: Analysis and Recommendations.\" _The American Statistician_ 37 (3). American Statistical Association, Taylor & Francis, Ltd.: 242–47. doi:[10.1080/00031305.1983.10483115](https://doi.org/10.1080/00031305.1983.10483115).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} variance\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = nanvariancech( x.length, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction nanvariancech( N, correction, x, strideX ) {\n\treturn ndarray( N, correction, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default nanvariancech;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array ignoring `NaN` values and using a one-pass trial mean algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass trial mean approach, as suggested by Chan et al (1983).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Ling, Robert F. 1974. \"Comparison of Several Algorithms for Computing Sample Means and Variances.\" _Journal of the American Statistical Association_ 69 (348). American Statistical Association, Taylor & Francis, Ltd.: 859–66. doi:[10.2307/2286154](https://doi.org/10.2307/2286154).\n* -   Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. 1983. \"Algorithms for Computing the Sample Variance: Analysis and Recommendations.\" _The American Statistician_ 37 (3). American Statistical Association, Taylor & Francis, Ltd.: 242–47. doi:[10.1080/00031305.1983.10483115](https://doi.org/10.1080/00031305.1983.10483115).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} variance\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = nanvariancech( 5, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction nanvariancech( N, correction, x, strideX, offsetX ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar nc;\n\tvar M;\n\tvar d;\n\tvar v;\n\tvar n;\n\tvar i;\n\tvar o;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, correction, o, strideX, offsetX );\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tv = x[ offsetX ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\n\t// Find an estimate for the mean...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tmu = v;\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tix += strideX;\n\ti += 1;\n\n\t// Compute the variance...\n\tM2 = 0.0;\n\tM = 0.0;\n\tn = 1;\n\tfor ( i; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\td = v - mu;\n\t\t\tM2 += d * d;\n\t\t\tM += d;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn (M2/nc) - ((M/n)*(M/nc));\n}\n\n\n// EXPORTS //\n\nexport default nanvariancech;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array ignoring `NaN` values and using a one-pass trial mean algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass trial mean approach, as suggested by Chan et al (1983).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Ling, Robert F. 1974. \"Comparison of Several Algorithms for Computing Sample Means and Variances.\" _Journal of the American Statistical Association_ 69 (348). American Statistical Association, Taylor & Francis, Ltd.: 859–66. doi:[10.2307/2286154](https://doi.org/10.2307/2286154).\n* -   Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. 1983. \"Algorithms for Computing the Sample Variance: Analysis and Recommendations.\" _The American Statistician_ 37 (3). American Statistical Association, Taylor & Francis, Ltd.: 242–47. doi:[10.1080/00031305.1983.10483115](https://doi.org/10.1080/00031305.1983.10483115).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} variance\n*\n* @example\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = nanvariancech( 5, 1, arraylike2object( x ), 2, 1 );\n* // returns 6.25\n*/\nfunction nanvariancech( N, correction, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar nc;\n\tvar M;\n\tvar d;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\t// Cache references to array data:\n\txbuf = x.data;\n\n\t// Cache references to element accessors:\n\tget = x.accessors[ 0 ];\n\n\tif ( N === 1 || strideX === 0 ) {\n\t\tv = get( xbuf, offsetX );\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\n\t// Find an estimate for the mean...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = get( xbuf, ix );\n\t\tif ( v === v ) {\n\t\t\tmu = v;\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tix += strideX;\n\ti += 1;\n\n\t// Compute the variance...\n\tM2 = 0.0;\n\tM = 0.0;\n\tn = 1;\n\tfor ( i; i < N; i++ ) {\n\t\tv = get( xbuf, ix );\n\t\tif ( v === v ) {\n\t\t\td = v - mu;\n\t\t\tM2 += d * d;\n\t\t\tM += d;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn (M2/nc) - ((M/n)*(M/nc));\n}\n\n\n// EXPORTS //\n\nexport default nanvariancech;\n"],"names":["nanvariancech","N","correction","x","strideX","offsetX","mu","ix","M2","nc","M","d","v","n","i","o","NaN","arraylike2object","accessorProtocol","xbuf","get","data","accessors","ndarray","stride2offset"],"mappings":";;2MAsDA,SAASA,EAAeC,EAAGC,EAAYC,EAAGC,GACzC,OCAD,SAAwBH,EAAGC,EAAYC,EAAGC,EAASC,GAClD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKd,GAAK,EACT,OAAOe,IAGR,IADAD,EAAIE,EAAkBd,IACfe,iBACN,OCjBF,SAAwBjB,EAAGC,EAAYC,EAAGC,EAASC,GAClD,IAAIc,EACAC,EACAd,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAQJ,GALAK,EAAOhB,EAAEkB,KAGTD,EAAMjB,EAAEmB,UAAW,GAER,IAANrB,GAAuB,IAAZG,EAEf,OADAQ,EAAIQ,EAAKD,EAAMd,KACJO,GAAKX,EAAEC,EAAa,EACvB,EAEDc,IAKR,IAHAT,EAAKF,EAGCS,EAAI,EAAGA,EAAIb,EAAGa,IAAM,CAEzB,IADAF,EAAIQ,EAAKD,EAAMZ,KACJK,EAAI,CACdN,EAAKM,EACL,KACA,CACDL,GAAMH,CACN,CACD,GAAKU,IAAMb,EACV,OAAOe,IASR,IAPAT,GAAMH,EACNU,GAAK,EAGLN,EAAK,EACLE,EAAI,EACJG,EAAI,EACKC,EAAIb,EAAGa,KACfF,EAAIQ,EAAKD,EAAMZ,KACJK,IAEVJ,IADAG,EAAIC,EAAIN,GACEK,EACVD,GAAKC,EACLE,GAAK,GAENN,GAAMH,EAGP,OADAK,EAAKI,EAAIX,IACE,EACHc,IAEAR,EAAGC,EAAQC,EAAEG,GAAIH,EAAED,EAC5B,CD7CSa,CAAWrB,EAAGC,EAAYa,EAAGX,EAASC,GAE9C,GAAW,IAANJ,GAAuB,IAAZG,EAEf,OADAQ,EAAIT,EAAGE,KACIO,GAAKX,EAAEC,EAAa,EACvB,EAEDc,IAKR,IAHAT,EAAKF,EAGCS,EAAI,EAAGA,EAAIb,EAAGa,IAAM,CAEzB,IADAF,EAAIT,EAAGI,KACIK,EAAI,CACdN,EAAKM,EACL,KACA,CACDL,GAAMH,CACN,CACD,GAAKU,IAAMb,EACV,OAAOe,IASR,IAPAT,GAAMH,EACNU,GAAK,EAGLN,EAAK,EACLE,EAAI,EACJG,EAAI,EACKC,EAAIb,EAAGa,KACfF,EAAIT,EAAGI,KACIK,IAEVJ,IADAG,EAAIC,EAAIN,GACEK,EACVD,GAAKC,EACLE,GAAK,GAENN,GAAMH,EAGP,OADAK,EAAKI,EAAIX,IACE,EACHc,IAEAR,EAAGC,EAAQC,EAAEG,GAAIH,EAAED,EAC5B,CD9DQc,CAAStB,EAAGC,EAAYC,EAAGC,EAASoB,EAAevB,EAAGG,GAC9D"}